#!/bin/bash

add_project() {
  PROJECT=$1
  PROJ_PATH=$2

  ABS_PROJ_PATH=$( cd "$PROJ_PATH" && pwd )
  echo "Adding $PROJECT as $ABS_PROJ_PATH"
  ln -s $ABS_PROJ_PATH ~/.workon/$PROJECT

  edit_project $1
}

edit_project() {
  PROJECT_BASE_DIR=$(cat $HOME/.workon | grep "$1 = " | awk -F= '{print $2}' | xargs)
  $EDITOR "$PROJECT_BASE_DIR/.workon"
}

list_projects() {
  ls -1 $HOME/.workon
}

run_project() {
  export CURRENT_PROJECT=$1

  PROJECT_BASE_DIR="$HOME/.workon/$CURRENT_PROJECT"
  echo "Project Base Dir: $PROJECT_BASE_DIR"

  if [[ -f "$PROJECT_BASE_DIR/.workon" ]]; then
    cd $PROJECT_BASE_DIR
    PROJECT_ROOT_DIR=$PROJECT_BASE_DIR
    source .workon

    cd $PROJECT_ROOT_DIR
    exec $SHELL
  else
    echo "Project $CURRENT_PROJECT is not defined. Please set it in $HOME/.workon and create $PROJECT_BASE_DIR/.workon"
  fi
}

check_for_config() {
  if [ ! -f $HOME/.workon ]; then
    echo "No projects configured! Add a project before use."
    exit
  fi
}

usage() {
  cat <<EOF
Usage:  $0 add <project> <project_path>
	     Create a project entry named <project> and edit the project script
             in <project_path>
        $0 edit <project>
             Edit the project script in <project_path>
        $0 list
             List projects defined in $HOME/.workon
        $0 <project>
             Start a shell in <project>'s defined path"
EOF
}

if [[ "$1" == "add" ]]; then
  add_project $2 $3
elif [[ "$1" == "edit" ]]; then
  check_for_config
  edit_project $2
elif [[ "$1" == "list" ]]; then
  check_for_config
  list_projects
elif [[ "$1" == "help" ]]; then
  usage
else
  check_for_config
  run_project $1
fi
